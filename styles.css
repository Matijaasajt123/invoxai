// Optimized JavaScript for INVOX.AI Website
// Performance and accessibility improvements

(function() {
    'use strict';

    // Configuration
    const CONFIG = {
        ANIMATION_DURATION: 600,
        SCROLL_OFFSET: 80,
        DEBOUNCE_DELAY: 10,
        INTERSECTION_THRESHOLD: 0.1,
        STATS_ANIMATION_DURATION: 2000
    };

    // Utility functions
    const utils = {
        // Debounce function for performance optimization
        debounce: function(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },

        // Throttle function for scroll events
        throttle: function(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        },

        // Check if element is in viewport
        isInViewport: function(element) {
            const rect = element.getBoundingClientRect();
            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        },

        // Smooth scroll to element
        scrollToElement: function(element, offset = CONFIG.SCROLL_OFFSET) {
            if (!element) return;
            
            const elementPosition = element.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - offset;

            window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
            });
        },

        // Analytics tracking placeholder
        trackEvent: function(category, action, label) {
            console.log(`Analytics: ${category} - ${action} - ${label}`);
            
            // Google Analytics 4 example
            if (typeof gtag !== 'undefined') {
                gtag('event', action, {
                    event_category: category,
                    event_label: label
                });
            }
        }
    };

    // Main application object
    const App = {
        // Initialize the application
        init: function() {
            this.setupEventListeners();
            this.initializeAnimations();
            this.initializeNavigation();
            this.initializeAccessibility();
            this.initializePerformanceOptimizations();
            this.markAsLoaded();
        },

        // Set up all event listeners
        setupEventListeners: function() {
            // DOM Content Loaded
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.onDOMReady());
            } else {
                this.onDOMReady();
            }

            // Window load event
            window.addEventListener('load', () => this.onWindowLoad());

            // Scroll events
            window.addEventListener('scroll', utils.throttle(() => this.onScroll(), 16));

            // Resize events
            window.addEventListener('resize', utils.debounce(() => this.onResize(), 250));

            // Keyboard events
            document.addEventListener('keydown', (e) => this.onKeyDown(e));

            // Focus events for accessibility
            document.addEventListener('focusin', (e) => this.onFocusIn(e));
            document.addEventListener('focusout', (e) => this.onFocusOut(e));
        },

        // DOM ready handler
        onDOMReady: function() {
            this.initializeMobileMenu();
            this.initializeScrollToSection();
            this.initializeContactButtons();
            this.initializeLucideIcons();
        },

        // Window load handler
        onWindowLoad: function() {
            this.initializeIntersectionObserver();
            this.initializeImageLazyLoading();
            this.measurePerformance();
        },

        // Scroll handler
        onScroll: function() {
            this.updateNavbarBackground();
            this.updateActiveNavLink();
        },

        // Resize handler
        onResize: function() {
            this.closeMobileMenuOnResize();
        },

        // Keyboard handler
        onKeyDown: function(e) {
            // ESC key closes mobile menu
            if (e.key === 'Escape') {
                this.closeMobileMenu();
            }

            // Enter key on buttons
            if (e.key === 'Enter' && e.target.tagName === 'BUTTON') {
                e.target.click();
            }

            // Tab navigation improvements
            if (e.key === 'Tab') {
                this.handleTabNavigation(e);
            }
        },

        // Focus in handler
        onFocusIn: function(e) {
            // Add focus ring for keyboard navigation
            if (e.target.matches('button, a, input, textarea, select')) {
                e.target.classList.add('keyboard-focus');
            }
        },

        // Focus out handler
        onFocusOut: function(e) {
            e.target.classList.remove('keyboard-focus');
        },

        // Initialize mobile menu functionality
        initializeMobileMenu: function() {
            const hamburger = document.getElementById('hamburger');
            const navMenu = document.getElementById('nav-menu');
            
            if (!hamburger || !navMenu) return;

            hamburger.addEventListener('click', () => {
                const isActive = navMenu.classList.contains('active');
                
                if (isActive) {
                    this.closeMobileMenu();
                } else {
                    this.openMobileMenu();
                }
                
                utils.trackEvent('navigation', 'mobile_menu_toggle', isActive ? 'close' : 'open');
            });

            // Close mobile menu when clicking on a link
            const navLinks = navMenu.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', () => {
                    this.closeMobileMenu();
                    utils.trackEvent('navigation', 'nav_link_click', link.textContent.trim());
                });
            });

            // Close mobile menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!hamburger.contains(e.target) && !navMenu.contains(e.target)) {
                    this.closeMobileMenu();
                }
            });
        },

        // Open mobile menu
        openMobileMenu: function() {
            const hamburger = document.getElementById('hamburger');
            const navMenu = document.getElementById('nav-menu');
            
            if (!hamburger || !navMenu) return;

            navMenu.classList.add('active');
            hamburger.classList.add('active');
            hamburger.setAttribute('aria-expanded', 'true');
            
            // Focus first menu item
            const firstLink = navMenu.querySelector('.nav-link');
            if (firstLink) {
                setTimeout(() => firstLink.focus(), 100);
            }

            // Prevent body scroll
            document.body.style.overflow = 'hidden';
        },

        // Close mobile menu
        closeMobileMenu: function() {
            const hamburger = document.getElementById('hamburger');
            const navMenu = document.getElementById('nav-menu');
            
            if (!hamburger || !navMenu) return;

            navMenu.classList.remove('active');
            hamburger.classList.remove('active');
            hamburger.setAttribute('aria-expanded', 'false');
            
            // Restore body scroll
            document.body.style.overflow = '';
        },

        // Close mobile menu on resize
        closeMobileMenuOnResize: function() {
            if (window.innerWidth > 768) {
                this.closeMobileMenu();
            }
        },

        // Initialize scroll to section functionality
        initializeScrollToSection: function() {
            // Global function for onclick handlers
            window.scrollToSection = (sectionId) => {
                const element = document.getElementById(sectionId);
                if (element) {
                    utils.scrollToElement(element);
                    utils.trackEvent('navigation', 'scroll_to_section', sectionId);
                }
            };
        },

        // Initialize contact buttons
        initializeContactButtons: function() {
            const contactButtons = document.querySelectorAll('.btn-contact, .nav-cta');
            contactButtons.forEach(button => {
                button.addEventListener('click', (e) => {
                    const buttonText = button.textContent.trim();
                    utils.trackEvent('engagement', 'contact_button_click', buttonText);
                });
            });

            // Track external link clicks
            const externalLinks = document.querySelectorAll('a[href^="http"], a[href^="https://wa.me"], a[href^="https://instagram.com"]');
            externalLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    const href = link.getAttribute('href');
                    utils.trackEvent('engagement', 'external_link_click', href);
                });
            });
        },

        // Initialize Lucide icons
        initializeLucideIcons: function() {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        },

        // Initialize intersection observer for animations
        initializeIntersectionObserver: function() {
            if (!('IntersectionObserver' in window)) return;

            const observerOptions = {
                threshold: CONFIG.INTERSECTION_THRESHOLD,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('visible');
                        
                        // Special handling for stats animation
                        if (entry.target.classList.contains('stats-card')) {
                            this.animateStatsCard(entry.target);
                        }
                        
                        observer.unobserve(entry.target);
                    }
                });
            }, observerOptions);

            // Observe elements for animation
            const animateElements = document.querySelectorAll(
                '.services-list li, .pain-points-list li, .case-study, .comparison-card, .about-content, .contact-content'
            );
            
            animateElements.forEach(el => {
                el.classList.add('animate-fade-in');
                observer.observe(el);
            });
        },

        // Initialize animations
        initializeAnimations: function() {
            // Add CSS for animations if not already present
            if (!document.querySelector('#animation-styles')) {
                const style = document.createElement('style');
                style.id = 'animation-styles';
                style.textContent = `
                    .keyboard-focus {
                        outline: 2px solid #667eea !important;
                        outline-offset: 2px !important;
                    }
                    
                    .animate-fade-in {
                        opacity: 0;
                        transform: translateY(30px);
                        transition: opacity ${CONFIG.ANIMATION_DURATION}ms ease, transform ${CONFIG.ANIMATION_DURATION}ms ease;
                    }
                    
                    .animate-fade-in.visible {
                        opacity: 1;
                        transform: translateY(0);
                    }
                    
                    @media (prefers-reduced-motion: reduce) {
                        .animate-fade-in {
                            transition: none;
                            opacity: 1;
                            transform: none;
                        }
                    }
                `;
                document.head.appendChild(style);
            }
        },

        // Animate stats card (placeholder for future stats)
        animateStatsCard: function(card) {
            const statsNumber = card.querySelector('.stats-number');
            if (!statsNumber) return;

            const text = statsNumber.textContent;
            
            // Simple counter animation for numbers
            if (text.match(/^\d+/)) {
                const number = parseInt(text);
                this.animateCounter(statsNumber, number, text);
            }
        },

        // Counter animation
        animateCounter: function(element, target, originalText) {
            let start = 0;
            const increment = target / (CONFIG.STATS_ANIMATION_DURATION / 16);
            
            const updateCounter = () => {
                start += increment;
                if (start < target) {
                    const currentValue = Math.floor(start);
                    element.textContent = originalText.replace(/^\d+/, currentValue);
                    requestAnimationFrame(updateCounter);
                } else {
                    element.textContent = originalText;
                }
            };
            
            updateCounter();
        },

        // Initialize navigation
        initializeNavigation: function() {
            // Update active nav link on scroll
            this.navLinks = document.querySelectorAll('.nav-link[href^="#"]');
            this.sections = Array.from(this.navLinks).map(link => {
                const href = link.getAttribute('href');
                return document.querySelector(href);
            }).filter(Boolean);
        },

        // Update navbar background on scroll
        updateNavbarBackground: function() {
            const navbar = document.querySelector('.navbar');
            if (!navbar) return;

            if (window.scrollY > 50) {
                navbar.style.background = 'rgba(15, 23, 42, 0.95)';
            } else {
                navbar.style.background = 'rgba(15, 23, 42, 0.9)';
            }
        },

        // Update active navigation link
        updateActiveNavLink: function() {
            if (!this.sections || !this.navLinks) return;

            const scrollPosition = window.scrollY + CONFIG.SCROLL_OFFSET + 100;

            for (let i = this.sections.length - 1; i >= 0; i--) {
                const section = this.sections[i];
                if (section && section.offsetTop <= scrollPosition) {
                    // Remove active class from all links
                    this.navLinks.forEach(link => link.classList.remove('active'));
                    
                    // Add active class to current link
                    this.navLinks[i].classList.add('active');
                    break;
                }
            }
        },

        // Initialize accessibility features
        initializeAccessibility: function() {
            // Add skip link functionality
            const skipLink = document.querySelector('.skip-link');
            if (skipLink) {
                skipLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const target = document.querySelector(skipLink.getAttribute('href'));
                    if (target) {
                        target.focus();
                        target.scrollIntoView({ behavior: 'smooth' });
                    }
                });
            }

            // Improve button accessibility
            const buttons = document.querySelectorAll('button:not([aria-label])');
            buttons.forEach(button => {
                if (!button.getAttribute('aria-label') && button.textContent.trim()) {
                    button.setAttribute('aria-label', button.textContent.trim());
                }
            });

            // Add role attributes where needed
            const navMenu = document.getElementById('nav-menu');
            if (navMenu && !navMenu.getAttribute('role')) {
                navMenu.setAttribute('role', 'menu');
            }
        },

        // Handle tab navigation
        handleTabNavigation: function(e) {
            const navMenu = document.getElementById('nav-menu');
            if (!navMenu || !navMenu.classList.contains('active')) return;

            const focusableElements = navMenu.querySelectorAll('a, button');
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];

            if (e.shiftKey) {
                if (document.activeElement === firstElement) {
                    lastElement.focus();
                    e.preventDefault();
                }
            } else {
                if (document.activeElement === lastElement) {
                    firstElement.focus();
                    e.preventDefault();
                }
            }
        },

        // Initialize image lazy loading
        initializeImageLazyLoading: function() {
            if (!('IntersectionObserver' in window)) return;

            const imageObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        if (img.dataset.src) {
                            img.src = img.dataset.src;
                            img.classList.remove('lazy');
                            imageObserver.unobserve(img);
                        }
                    }
                });
            });

            const lazyImages = document.querySelectorAll('img.lazy');
            lazyImages.forEach(img => imageObserver.observe(img));
        },

        // Initialize performance optimizations
        initializePerformanceOptimizations: function() {
            // Preload critical resources
            this.preloadCriticalResources();
            
            // Optimize third-party scripts
            this.optimizeThirdPartyScripts();
        },

        // Preload critical resources
        preloadCriticalResources: function() {
            const criticalImages = ['logo.png', 'matija.webp'];
            
            criticalImages.forEach(src => {
                const link = document.createElement('link');
                link.rel = 'preload';
                link.as = 'image';
                link.href = src;
                document.head.appendChild(link);
            });
        },

        // Optimize third-party scripts
        optimizeThirdPartyScripts: function() {
            // Delay non-critical third-party scripts
            setTimeout(() => {
                this.loadNonCriticalScripts();
            }, 3000);
        },

        // Load non-critical scripts
        loadNonCriticalScripts: function() {
            // Placeholder for analytics or other non-critical scripts
            console.log('Loading non-critical scripts...');
        },

        // Mark page as loaded
        markAsLoaded: function() {
            document.body.classList.add('loaded');
        },

        // Measure performance
        measurePerformance: function() {
            if (!('performance' in window)) return;

            setTimeout(() => {
                const perfData = performance.getEntriesByType('navigation')[0];
                if (perfData) {
                    const loadTime = perfData.loadEventEnd - perfData.loadEventStart;
                    console.log(`Page load time: ${loadTime}ms`);
                    
                    // Track performance metrics
                    utils.trackEvent('performance', 'page_load_time', Math.round(loadTime));
                }

                // Core Web Vitals
                this.measureCoreWebVitals();
            }, 0);
        },

        // Measure Core Web Vitals
        measureCoreWebVitals: function() {
            // Largest Contentful Paint
            if ('PerformanceObserver' in window) {
                try {
                    const observer = new PerformanceObserver((list) => {
                        const entries = list.getEntries();
                        const lastEntry = entries[entries.length - 1];
                        console.log('LCP:', lastEntry.startTime);
                        utils.trackEvent('performance', 'lcp', Math.round(lastEntry.startTime));
                    });
                    observer.observe({ entryTypes: ['largest-contentful-paint'] });
                } catch (e) {
                    console.log('LCP measurement not supported');
                }

                // First Input Delay
                try {
                    const observer = new PerformanceObserver((list) => {
                        const entries = list.getEntries();
                        entries.forEach(entry => {
                            console.log('FID:', entry.processingStart - entry.startTime);
                            utils.trackEvent('performance', 'fid', Math.round(entry.processingStart - entry.startTime));
                        });
                    });
                    observer.observe({ entryTypes: ['first-input'] });
                } catch (e) {
                    console.log('FID measurement not supported');
                }
            }
        }
    };

    // Error handling
    window.addEventListener('error', (e) => {
        console.error('JavaScript error:', e.error);
        utils.trackEvent('error', 'javascript_error', e.error.message);
    });

    window.addEventListener('unhandledrejection', (e) => {
        console.error('Unhandled promise rejection:', e.reason);
        utils.trackEvent('error', 'promise_rejection', e.reason);
    });

    // Initialize the application
    App.init();

    // Expose utilities globally for debugging
    if (typeof window !== 'undefined') {
        window.InvoxApp = App;
        window.InvoxUtils = utils;
    }

})();
